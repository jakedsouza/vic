eyJhbGciOiJIUzI1NiJ9.IyBBZnRlciBhbnkgY2hhbmdlIHRvIHRoaXMgZmlsZSB5b3UgTVVTVCByZS1zaWduIGFuZCBjaGVja2luIHRoZSAuZHJvbmUueW1sLnNpZwojIFdoZW4geW91IGFyZSByZWFkeSB0byBzdWJtaXQgYSBwdWxsIHJlcXVlc3QsIHlvdSBtdXN0IHJlZ2VuZXJhdGUgLmRyb25lLnltbC5zaWcgZm9yIHRoZSB2bXdhcmUvdmljIHJlcG86CiMgJCBleHBvcnQgRFJPTkVfU0VSVkVSPWh0dHBzOi8vY2kudmNuYS5pbwojICQgZXhwb3J0IERST05FX1RPS0VOPTx0b2tlbj4KIyAkIGRyb25lIHNpZ24gdm13YXJlL3ZpYwojIFRoZSBzZWNyZXRzIGZpbGUgaXMgaW4gb3VyIGxvY2FsIGdpdCByZXBvLiAgQXNrIG1oYWdlbiBmb3IgYWNjZXNzLgoKLS0tCndvcmtzcGFjZToKICBiYXNlOiAvZ28KICBwYXRoOiBzcmMvZ2l0aHViLmNvbS92bXdhcmUvdmljCgpwaXBlbGluZToKICBjbG9uZToKICAgIGltYWdlOiBwbHVnaW5zL2dpdAogICAgdGFnczogdHJ1ZQogICAgIyBkb250IGNsb25lIHN1Ym1vZHVsZXMKICAgIHJlY3Vyc2l2ZTogZmFsc2UKCiAgd2FpdC1mb3ItYnVpbGQ6CiAgICBpbWFnZTogZ2NyLmlvL2VtaW5lbnQtbmF0aW9uLTg3MzE3L3ZpYy1pbnRlZ3JhdGlvbi10ZXN0OjEuMzEKICAgIHB1bGw6IHRydWUKICAgIGVudmlyb25tZW50OgogICAgICBCSU46IGJpbgogICAgICBHT1BBVEg6IC9nbwogICAgICBTSEVMTDogL2Jpbi9iYXNoCiAgICAgIFRFU1RfVVJMX0FSUkFZOiAke1RFU1RfVVJMX0FSUkFZfQogICAgICBEUk9ORV9TRVJWRVI6ICR7RFJPTkVfU0VSVkVSfQogICAgICBEUk9ORV9UT0tFTjogJHtEUk9ORV9UT0tFTn0KICAgIGNvbW1hbmRzOgogICAgICAtIHRlc3RzL3dhaXRfdW50aWxfcHJldmlvdXNfYnVpbGRzX2NvbXBsZXRlLnNoCgogIHZpYy1lbmdpbmU6CiAgICBpbWFnZTogZ2NyLmlvL2VtaW5lbnQtbmF0aW9uLTg3MzE3L3ZpYy1pbnRlZ3JhdGlvbi10ZXN0OjEuMzEKICAgIHB1bGw6IHRydWUKICAgIGVudmlyb25tZW50OgogICAgICBCSU46IGJpbgogICAgICBHT1BBVEg6IC9nbwogICAgICBTSEVMTDogL2Jpbi9iYXNoCiAgICAgIFRFU1RfVVJMX0FSUkFZOiAgJHtURVNUX1VSTF9BUlJBWX0KICAgICAgVEVTVF9VU0VSTkFNRTogICR7VEVTVF9VU0VSTkFNRX0KICAgICAgVEVTVF9QQVNTV09SRDogICR7VEVTVF9QQVNTV09SRH0KICAgICAgQlVJTERfTlVNQkVSOiAke0RST05FX0JVSUxEX05VTUJFUn0KICAgICAgQ09NTUlUOiAke0RST05FX0NPTU1JVH0KICAgIGNvbW1hbmRzOgogICAgICAtIG1ha2UgbWFyawogICAgICAtIG1ha2UgLWozIGFsbAogICAgICAtIG1ha2Ugc2luY2VtYXJrCiAgICAgIC0gbWFrZSBtYXJrCiAgICAgIC0gZWNobyBgbHMgdmVuZG9yL2dpdGh1Yi5jb20vdm13YXJlL2dvdm1vbWkvdmltMjUvbWV0aG9kc2AKICAgICAgLSBlY2hvIGBscyB2ZW5kb3IvZ2l0aHViLmNvbS92bXdhcmUvZ292bW9taS92aW0yNS90eXBlc2AKICAgICAgLSBlY2hvIGBscyB2ZW5kb3IvZ2l0aHViLmNvbS9kb2NrZXIvZG9ja2VyL3ZlbmRvci9naXRodWIuY29tL29wZW5jb250YWluZXJzL3J1bmMvbGliY29udGFpbmVyL3N5c3RlbWAKICAgICAgLSBleHBvcnQgVklDX0VTWF9VUkxfQVJSQVk9ImB0ZXN0cy9nZXRfdGVzdF91cmwuc2hgIgogICAgICAtIG1ha2UgLWozIHRlc3QKICAgICAgLSBtYWtlIHNpbmNlbWFyawogICAgd2hlbjoKICAgICAgc3RhdHVzOiAgc3VjY2VzcwoKICB2aWMtaW50ZWdyYXRpb24tdGVzdC1vbi1wcjoKICAgIGltYWdlOiBnY3IuaW8vZW1pbmVudC1uYXRpb24tODczMTcvdmljLWludGVncmF0aW9uLXRlc3Q6MS4zMQogICAgcHVsbDogdHJ1ZQogICAgcHJpdmlsZWdlZDogdHJ1ZQogICAgZW52aXJvbm1lbnQ6CiAgICAgIEJJTjogYmluCiAgICAgIEdPUEFUSDogL2dvCiAgICAgIFNIRUxMOiAvYmluL2Jhc2gKICAgICAgTE9HX1RFTVBfRElSOiBpbnN0YWxsLWxvZ3MKICAgICAgR0lUSFVCX0FVVE9NQVRJT05fQVBJX0tFWTogICR7R0lUSFVCX0FVVE9NQVRJT05fQVBJX0tFWX0KICAgICAgRFJPTkVfU0VSVkVSOiAgJHtEUk9ORV9TRVJWRVJ9CiAgICAgIERST05FX1RPS0VOOiAgJHtEUk9ORV9UT0tFTn0KICAgICAgVEVTVF9VUkxfQVJSQVk6ICAke1RFU1RfVVJMX0FSUkFZfQogICAgICBURVNUX1VTRVJOQU1FOiAgJHtURVNUX1VTRVJOQU1FfQogICAgICBURVNUX1BBU1NXT1JEOiAgJHtURVNUX1BBU1NXT1JEfQogICAgICBURVNUX0RBVEFTVE9SRTogJHtURVNUX0RBVEFTVE9SRX0KICAgICAgVEVTVF9USU1FT1VUOiAke1RFU1RfVElNRU9VVH0KICAgICAgUkVQT1JUSU5HX1NFUlZFUl9VUkw6ICR7UkVQT1JUSU5HX1NFUlZFUl9VUkx9CiAgICAgIEdPVkNfSU5TRUNVUkU6IHRydWUKICAgICAgR09WQ19VU0VSTkFNRTogICR7VEVTVF9VU0VSTkFNRX0KICAgICAgR09WQ19QQVNTV09SRDogICR7VEVTVF9QQVNTV09SRH0KICAgICAgR09WQ19EQVRBU1RPUkU6ICR7VEVTVF9EQVRBU1RPUkV9CiAgICAgIEdTX1BST0pFQ1RfSUQ6ICR7R1NfUFJPSkVDVF9JRH0KICAgICAgR1NfQ0xJRU5UX0VNQUlMOiAke0dTX0NMSUVOVF9FTUFJTH0KICAgICAgR1NfUFJJVkFURV9LRVk6ICR7R1NfUFJJVkFURV9LRVl9CiAgICAgIERPTUFJTjogJHtDSV9ET01BSU59CiAgICAgIFNZU0xPR19TRVJWRVI6ICR7U1lTTE9HX1NFUlZFUn0KICAgICAgU1lTTE9HX1VTRVI6ICR7U1lTTE9HX1VTRVJ9CiAgICAgIFNZU0xPR19QQVNTV0Q6ICR7U1lTTE9HX1BBU1NXRH0KICAgIGNvbW1hbmRzOgogICAgICAtIG1ha2UgbWFyawogICAgICAtIHRlc3RzL2ludGVncmF0aW9uLXRlc3Quc2gKICAgICAgLSBtYWtlIHNpbmNlbWFyawogICAgd2hlbjoKICAgICAgc3RhdHVzOiAgc3VjY2VzcwoKICB2aWMtdWk6CiAgICBpbWFnZTogZ2NyLmlvL2VtaW5lbnQtbmF0aW9uLTg3MzE3L3ZpYy1pbnRlZ3JhdGlvbi10ZXN0OjEuMzEKICAgIHB1bGw6IHRydWUKICAgIGVudmlyb25tZW50OgogICAgICBCSU46IGJpbgogICAgY29tbWFuZHM6CiAgICAgIC0gbWFrZSBtYXJrCiAgICAgIC0gbWFrZSB2aWMtdWktcGx1Z2lucwogICAgICAtIG1ha2Ugc2luY2VtYXJrCiAgICB3aGVuOgogICAgICBzdGF0dXM6ICBzdWNjZXNzCgogIGJ1bmRsZToKICAgIGltYWdlOiBnb2xhbmc6MS44CiAgICBwdWxsOiB0cnVlCiAgICBlbnZpcm9ubWVudDoKICAgICAgQklOOiBiaW4KICAgICAgQklOX1RFTVBfRElSOiBiaW4vdmljCiAgICAgIEdPUEFUSDogL2dvCiAgICAgIFNIRUxMOiAvYmluL2Jhc2gKICAgIGNvbW1hbmRzOgogICAgICAtIG1ha2UgbWFyawogICAgICAtIHJtIC1yZiAkQklOX1RFTVBfRElSCiAgICAgIC0gbWtkaXIgLXAgJEJJTl9URU1QX0RJUi91aQogICAgICAtIGNwIC1yZiB1aS9pbnN0YWxsZXIvKiAkQklOX1RFTVBfRElSL3VpCiAgICAgIC0gY3AgTElDRU5TRSAkQklOX1RFTVBfRElSCiAgICAgIC0gY3AgZG9jL2J1bmRsZS9SRUFETUUgJEJJTl9URU1QX0RJUgogICAgICAtIGNwICRCSU4vdmljLW1hY2hpbmUqICRCSU5fVEVNUF9ESVIKICAgICAgLSBjcCAkQklOL3ZpYy11aSogJEJJTl9URU1QX0RJUgogICAgICAtIGNwICRCSU4vYXBwbGlhbmNlLmlzbyAkQklOX1RFTVBfRElSCiAgICAgIC0gY3AgJEJJTi9ib290c3RyYXAuaXNvICRCSU5fVEVNUF9ESVIKICAgICAgLSB0YXIgY3p2ZiAkQklOL3ZpY18ke0RST05FX0JVSUxEX05VTUJFUn0udGFyLmd6IC1DICRCSU4gdmljCiAgICAgIC0gc2hhc3VtIC1hIDI1NiAkQklOL3ZpY18ke0RST05FX0JVSUxEX05VTUJFUn0udGFyLmd6CiAgICAgIC0gc2hhc3VtIC1hIDEgJEJJTi92aWNfJHtEUk9ORV9CVUlMRF9OVU1CRVJ9LnRhci5negogICAgICAtIG1kNXN1bSAkQklOL3ZpY18ke0RST05FX0JVSUxEX05VTUJFUn0udGFyLmd6CiAgICAgIC0gZHUgLWtzICRCSU4vdmljXyR7RFJPTkVfQlVJTERfTlVNQkVSfS50YXIuZ3ogfCBhd2sgJ3twcmludCAkMSAvIDEwMjR9JyB8IHsgcmVhZCB4OyBlY2hvICR4IE1COyB9CiAgICAgIC0gbWtkaXIgYnVuZGxlCiAgICAgIC0gY3AgJEJJTi92aWNfJHtEUk9ORV9CVUlMRF9OVU1CRVJ9LnRhci5neiBidW5kbGUKICAgICAgLSBtYWtlIHNpbmNlbWFyawogICAgd2hlbjoKICAgICAgcmVwbzogdm13YXJlL3ZpYwogICAgICAjIGV2ZW50OiBbIHB1c2gsIHRhZyBdCiAgICAgICMgYnJhbmNoOiBbIG1hc3RlciwgcmVsZWFzZXMvKiwgcmVmcy90YWdzLyogXQogICAgICBzdGF0dXM6IHN1Y2Nlc3MKCiAgbm90aWZ5LXNsYWNrOgogICAgaW1hZ2U6IHBsdWdpbnMvc2xhY2sKICAgIHdlYmhvb2s6ICR7U0xBQ0tfVVJMfQogICAgdXNlcm5hbWU6IGRyb25lCiAgICB0ZW1wbGF0ZTogPgogICAgICBidWlsZCBodHRwczovL2NpLnZjbmEuaW8vdm13YXJlL3ZpYy97eyBidWlsZC5udW1iZXIgfX0gZmluaXNoZWQgd2l0aCBhIHt7IGJ1aWxkLnN0YXR1cyB9fSBzdGF0dXMsIGZpbmQgdGhlIGxvZ3MgaGVyZTogaHR0cHM6Ly9jb25zb2xlLmNsb3VkLmdvb2dsZS5jb20vbS9jbG91ZHN0b3JhZ2UvYi92aWMtY2ktbG9ncy9vL2ludGVncmF0aW9uX2xvZ3Nfe3sgYnVpbGQubnVtYmVyIH19X3t7IGJ1aWxkLmNvbW1pdCB9fS56aXA_YXV0aHVzZXI9MQogICAgd2hlbjoKICAgICAgcmVwbzogdm13YXJlL3ZpYwogICAgICBicmFuY2g6IFsgbWFzdGVyLCByZWxlYXNlcy8qLCByZWZzL3RhZ3MvKiBdCiAgICAgIHN0YXR1czogZmFpbHVyZQoKICBwdWJsaXNoLWdjcy1idWlsZHM6CiAgICBpbWFnZTogbWFwbGFpbi9kcm9uZS1nY3M6bGF0ZXN0CiAgICBwdWxsOiB0cnVlCiAgICBzb3VyY2U6IGJ1bmRsZQogICAgdGFyZ2V0OiB2aWMtZW5naW5lLWJ1aWxkcy1qYWtlCiAgICBhY2w6CiAgICAgIC0gYWxsVXNlcnM6UkVBREVSCiAgICBjYWNoZV9jb250cm9sOiBwdWJsaWMsbWF4LWFnZT0zNjAwCiAgICB3aGVuOgogICAgICByZXBvOiB2bXdhcmUvdmljCiAgICAgICMgZXZlbnQ6IFsgcHVzaCBdCiAgICAgICMgYnJhbmNoOiBbIG1hc3RlciwgcmVsZWFzZXMvKiBdCiAgICAgIHN0YXR1czogc3VjY2VzcwoKICBwdWJsaXNoLWdjcy1yZWxlYXNlczoKICAgIGltYWdlOiBtYXBsYWluL2Ryb25lLWdjczpsYXRlc3QKICAgIHB1bGw6IHRydWUKICAgIHNvdXJjZTogYnVuZGxlCiAgICB0YXJnZXQ6IHZpYy1lbmdpbmUtcmVsZWFzZXMKICAgIGFjbDoKICAgICAgLSBhbGxVc2VyczpSRUFERVIKICAgIGNhY2hlX2NvbnRyb2w6IHB1YmxpYyxtYXgtYWdlPTM2MDAKICAgIHdoZW46CiAgICAgIHJlcG86IHZtd2FyZS92aWMKICAgICAgZXZlbnQ6IFsgcHVzaCwgdGFnIF0KICAgICAgYnJhbmNoOiBbIHJlZnMvdGFncy8qIF0KICAgICAgc3RhdHVzOiBzdWNjZXNzCgogIHJlcG9ydC1jb3ZlcmFnZToKICAgIGltYWdlOiBwbHVnaW5zL2NvdmVyYWdlCiAgICBzZXJ2ZXI6IGh0dHBzOi8vY292ZXJhZ2Uudm13YXJlLnJ1bgogICAgcGF0dGVybjogLmNvdmVyL2NvdmVyLm91dAogICAgd2hlbjoKICAgICAgYnJhbmNoOiBbIG1hc3RlciwgcmVsZWFzZXMvKiwgcmVmcy90YWdzLyogXQogICAgICByZXBvOiB2bXdhcmUvdmljCiAgICAgIHN0YXR1czogc3VjY2Vzcwo.cviH_AgBaEAkzmG2oiKDXiT9CG1pl-G87kx6yPq2zHE