eyJhbGciOiJIUzI1NiJ9.IyBBZnRlciBhbnkgY2hhbmdlIHRvIHRoaXMgZmlsZSB5b3UgTVVTVCByZWdlbmVyYXRlIGFuZCBjaGVja2luCiMgYSAuZHJvbmUuc2VjIGV2ZW4gaWYgbm8gc2VjcmV0cyB3ZXJlIGNoYW5nZWQuIFRoZSBzZWNyZXRzIGZpbGUgaXMgdGllZAojIHRvIGEgc3BlY2lmaWMgLmRyb25lLnltbCBzbyBhcnRpZmFjdHMgd2lsbCBub3QgYmUgdXBsb2FkZWQgdG8gKE9SIERPV05MT0FERUQKIyBGUk9NKSBCaW50cmF5IGluIGZvbGxvd2luZyBidWlsZHMgd2l0aG91dCBhbiB1cGRhdGVkIC5kcm9uZS5zZWMKIwojIFdoZW4geW91IGFyZSByZWFkeSB0byBzdWJtaXQgYSBwdWxsIHJlcXVlc3QsIHlvdSBtdXN0IHJlZ2VuZXJhdGUgLmRyb25lLnNlYyBmb3IgdGhlIHZtd2FyZS92aWMgcmVwbzoKIwojICQgZHJvbmUgLXMgaHR0cHM6Ly9jaS52bXdhcmUucnVuIC10ICR7RFJPTkVfVE9LRU59IHNlY3VyZSAtLWluICJzZWNyZXRzLnltbCIgLS1vdXQgIi5kcm9uZS5zZWMiIC0tcmVwbyB2bXdhcmUvdmljIC0teWFtbCAiLmRyb25lLnltbCIKIwojIFRoZSBzZWNyZXRzIGZpbGUgaXMgaW4gb3VyIGxvY2FsIGdpdCByZXBvLiAgQXNrIG1oYWdlbiBmb3IgYWNjZXNzLgotLS0Kd29ya3NwYWNlOgogIGJhc2U6IC9nbwogIHBhdGg6IHNyYy9naXRodWIuY29tL3Ztd2FyZS92aWMKCnBpcGVsaW5lOgogIGNsb25lOgogICAgaW1hZ2U6IHBsdWdpbnMvZ2l0CiAgICB0YWdzOiB0cnVlCiAgICAjIGRvbnQgY2xvbmUgc3VibW9kdWxlcwogICAgcmVjdXJzaXZlOiBmYWxzZQoKICB3YWl0LWZvci1idWlsZDoKICAgIHByZXZlbnQtY29uY3VycmVudC1idWlsZHM6CiAgICAgIGltYWdlOiBnY3IuaW8vZW1pbmVudC1uYXRpb24tODczMTcvdmljLWludGVncmF0aW9uLXRlc3Q6MS4yMgogICAgICBwdWxsOiB0cnVlCiAgICAgIGVudmlyb25tZW50OgogICAgICAgIEJJTjogYmluCiAgICAgICAgR09QQVRIOiAvZ28KICAgICAgICBTSEVMTDogL2Jpbi9iYXNoCiAgICAgICAgVEVTVF9VUkxfQVJSQVk6ICAkVEVTVF9VUkxfQVJSQVkKICAgICAgICBEUk9ORV9TRVJWRVI6ICAkRFJPTkVfU0VSVkVSCiAgICAgICAgRFJPTkVfVE9LRU46ICAkRFJPTkVfVE9LRU4KICAgICAgY29tbWFuZHM6CiAgICAgICAgLSB0ZXN0cy93YWl0X3VudGlsX3ByZXZpb3VzX2J1aWxkc19jb21wbGV0ZS5zaAoKICB2aWMtZW5naW5lOgogICAgaW1hZ2U6IGdjci5pby9lbWluZW50LW5hdGlvbi04NzMxNy92aWMtaW50ZWdyYXRpb24tdGVzdDoxLjIyCiAgICBwdWxsOiB0cnVlCiAgICBlbnZpcm9ubWVudDoKICAgICAgQklOOiBiaW4KICAgICAgR09QQVRIOiAvZ28KICAgICAgU0hFTEw6IC9iaW4vYmFzaAogICAgICBURVNUX1VSTF9BUlJBWTogICRURVNUX1VSTF9BUlJBWQogICAgICBURVNUX1VTRVJOQU1FOiAgJFRFU1RfVVNFUk5BTUUKICAgICAgVEVTVF9QQVNTV09SRDogICRURVNUX1BBU1NXT1JECiAgICAgIEJVSUxEX05VTUJFUjogJERST05FX0JVSUxEX05VTUJFUgogICAgICBDT01NSVQ6ICREUk9ORV9DT01NSVRfU0hBCiAgICBjb21tYW5kczoKICAgICAgLSBtYWtlIG1hcmsKICAgICAgLSBtYWtlIC1qMyBhbGwKICAgICAgLSBtYWtlIHNpbmNlbWFyawogICAgICAtIG1ha2UgbWFyawogICAgICAtIGVjaG8gYGxzIHZlbmRvci9naXRodWIuY29tL3Ztd2FyZS9nb3Ztb21pL3ZpbTI1L21ldGhvZHNgCiAgICAgIC0gZWNobyBgbHMgdmVuZG9yL2dpdGh1Yi5jb20vdm13YXJlL2dvdm1vbWkvdmltMjUvdHlwZXNgCiAgICAgIC0gZWNobyBgbHMgdmVuZG9yL2dpdGh1Yi5jb20vZG9ja2VyL2RvY2tlci92ZW5kb3IvZ2l0aHViLmNvbS9vcGVuY29udGFpbmVycy9ydW5jL2xpYmNvbnRhaW5lci9zeXN0ZW1gCiAgICAgIC0gZXhwb3J0IFZJQ19FU1hfVVJMX0FSUkFZPSJgdGVzdHMvZ2V0X3Rlc3RfdXJsLnNoYCIKICAgICAgLSBtYWtlIC1qMyB0ZXN0CiAgICAgIC0gbWFrZSBzaW5jZW1hcmsKCiAgaW50ZWdyYXRpb24tdGVzdC1vbi1wcjoKICAgIGltYWdlOiBnY3IuaW8vZW1pbmVudC1uYXRpb24tODczMTcvdmljLWludGVncmF0aW9uLXRlc3Q6MS4yMgogICAgcHVsbDogdHJ1ZQogICAgcHJpdmlsZWdlZDogdHJ1ZQogICAgZW52aXJvbm1lbnQ6CiAgICAgIEJJTjogYmluCiAgICAgIEdPUEFUSDogL2Ryb25lCiAgICAgIFNIRUxMOiAvYmluL2Jhc2gKICAgICAgTE9HX1RFTVBfRElSOiBpbnN0YWxsLWxvZ3MKICAgICAgR0lUSFVCX0FVVE9NQVRJT05fQVBJX0tFWTogICQkR0lUSFVCX0FVVE9NQVRJT05fQVBJX0tFWQogICAgICBEUk9ORV9TRVJWRVI6ICAkRFJPTkVfU0VSVkVSCiAgICAgIERST05FX1RPS0VOOiAgJERST05FX1RPS0VOCiAgICAgIFRFU1RfVVJMX0FSUkFZOiAgJFRFU1RfVVJMX0FSUkFZCiAgICAgIFRFU1RfVVNFUk5BTUU6ICAkVEVTVF9VU0VSTkFNRQogICAgICBURVNUX1BBU1NXT1JEOiAgJFRFU1RfUEFTU1dPUkQKICAgICAgVEVTVF9EQVRBU1RPUkU6ICRURVNUX0RBVEFTVE9SRQogICAgICBURVNUX1RJTUVPVVQ6ICRURVNUX1RJTUVPVVQKICAgICAgUkVQT1JUSU5HX1NFUlZFUl9VUkw6ICRSRVBPUlRJTkdfU0VSVkVSX1VSTAogICAgICBXSU5ET1dTX1VSTDogICRXSU5ET1dTX1VSTAogICAgICBXSU5ET1dTX1VTRVJOQU1FOiAgJFdJTkRPV1NfVVNFUk5BTUUKICAgICAgV0lORE9XU19QQVNTV09SRDogICRXSU5ET1dTX1BBU1NXT1JECiAgICAgIEdPVkNfSU5TRUNVUkU6IHRydWUKICAgICAgR09WQ19VU0VSTkFNRTogICRURVNUX1VTRVJOQU1FCiAgICAgIEdPVkNfUEFTU1dPUkQ6ICAkVEVTVF9QQVNTV09SRAogICAgICBHT1ZDX1JFU09VUkNFX1BPT0w6ICAkVEVTVF9SRVNPVVJDRQogICAgICBHT1ZDX0RBVEFTVE9SRTogJFRFU1RfREFUQVNUT1JFCiAgICAgIEdTX1BST0pFQ1RfSUQ6ICRHU19QUk9KRUNUX0lECiAgICAgIEdTX0NMSUVOVF9FTUFJTDogJEdTX0NMSUVOVF9FTUFJTAogICAgICBHU19QUklWQVRFX0tFWTogJEdTX1BSSVZBVEVfS0VZCiAgICAgIERPTUFJTjogJENJX0RPTUFJTgogICAgY29tbWFuZHM6CiAgICAgIC0gbWFrZSBtYXJrCiAgICAgIC0gdGVzdHMvaW50ZWdyYXRpb24tdGVzdC5zaAogICAgICAtIG1ha2Ugc2luY2VtYXJrCiAgICB3aGVuOgogICAgICBzdWNjZXNzOiB0cnVlCgogIHZpY3VpOgogICAgaW1hZ2U6IGdjci5pby9lbWluZW50LW5hdGlvbi04NzMxNy92aWMtaW50ZWdyYXRpb24tdGVzdDoxLjIyCiAgICBwdWxsOiB0cnVlCiAgICBlbnZpcm9ubWVudDoKICAgICAgQklOOiBiaW4KICAgIGNvbW1hbmRzOgogICAgICAtIG1ha2UgbWFyawogICAgICAtIG1ha2UgdmljLXVpLXBsdWdpbnMKICAgICAgLSBtYWtlIHNpbmNlbWFyawogICAgd2hlbjoKICAgICAgc3VjY2VzczogdHJ1ZQoKICBidW5kbGU6CiAgICBpbWFnZTogZ29sYW5nOjEuOAogICAgcHVsbDogdHJ1ZQogICAgZW52aXJvbm1lbnQ6CiAgICAgIEJJTjogYmluCiAgICAgIEJJTl9URU1QX0RJUjogYmluL3ZpYwogICAgICBHT1BBVEg6IC9nbwogICAgICBTSEVMTDogL2Jpbi9iYXNoCiAgICBjb21tYW5kczoKICAgICAgLSBtYWtlIG1hcmsKICAgICAgLSBybSAtcmYgJEJJTl9URU1QX0RJUgogICAgICAtIG1rZGlyIC1wICRCSU5fVEVNUF9ESVIvdWkKICAgICAgLSBjcCAtcmYgdWkvaW5zdGFsbGVyLyogJEJJTl9URU1QX0RJUi91aQogICAgICAtIGNwIExJQ0VOU0UgJEJJTl9URU1QX0RJUgogICAgICAtIGNwIGRvYy9idW5kbGUvUkVBRE1FICRCSU5fVEVNUF9ESVIKICAgICAgLSBjcCAkQklOL3ZpYy1tYWNoaW5lKiAkQklOX1RFTVBfRElSCiAgICAgIC0gY3AgJEJJTi92aWMtdWkqICRCSU5fVEVNUF9ESVIKICAgICAgLSBjcCAkQklOL2FwcGxpYW5jZS5pc28gJEJJTl9URU1QX0RJUgogICAgICAtIGNwICRCSU4vYm9vdHN0cmFwLmlzbyAkQklOX1RFTVBfRElSCiAgICAgIC0gdGFyIGN6dmYgJEJJTi92aWNfJERST05FX0JVSUxEX05VTUJFUi50YXIuZ3ogLUMgJEJJTiB2aWMKICAgICAgLSBzaGFzdW0gLWEgMjU2ICRCSU4vdmljXyREUk9ORV9CVUlMRF9OVU1CRVIudGFyLmd6CiAgICAgIC0gc2hhc3VtIC1hIDEgJEJJTi92aWNfJERST05FX0JVSUxEX05VTUJFUi50YXIuZ3oKICAgICAgLSBtZDVzdW0gJEJJTi92aWNfJERST05FX0JVSUxEX05VTUJFUi50YXIuZ3oKICAgICAgLSBkdSAta3MgJEJJTi92aWNfJERST05FX0JVSUxEX05VTUJFUi50YXIuZ3ogfCBhd2sgJ3twcmludCAkMSAvIDEwMjR9JyB8IHsgcmVhZCB4OyBlY2hvICR4IE1COyB9CiAgICAgIC0gbWFrZSBzaW5jZW1hcmsKICAgIHdoZW46CiAgICAgIHJlcG86IGpha2Vkc291emEvdmljCiAgICAgICMgYnJhbmNoOiBbIG1hc3RlciwgcmVmcy90YWdzLCByZWxlYXNlIF0KICAgICAgc3VjY2VzczogdHJ1ZQoKIyBub3RpZnk6CiMgICBzbGFjazoKIyAgICAgd2ViaG9va191cmw6ICQkU0xBQ0tfVVJMCiMgICAgIGNoYW5uZWw6IG13aWxsaWFtc29uLXN0YWZmCiMgICAgIHVzZXJuYW1lOiBkcm9uZQojICAgICB0ZW1wbGF0ZTogPgojICAgICAgIGJ1aWxkIGh0dHBzOi8vY2kudm13YXJlLnJ1bi92bXdhcmUvdmljL3t7IGJ1aWxkLm51bWJlciB9fSBmaW5pc2hlZCB3aXRoIGEge3sgYnVpbGQuc3RhdHVzIH19IHN0YXR1cywgZmluZCB0aGUgbG9ncyBoZXJlOiBodHRwczovL2NvbnNvbGUuY2xvdWQuZ29vZ2xlLmNvbS9tL2Nsb3Vkc3RvcmFnZS9iL3ZpYy1jaS1sb2dzL28vaW50ZWdyYXRpb25fbG9nc197eyBidWlsZC5udW1iZXIgfX1fe3sgYnVpbGQuY29tbWl0IH19LnppcD9hdXRodXNlcj0xCiMgICAgIHdoZW46CiMgICAgICAgcmVwbzogdm13YXJlL3ZpYwojICAgICAgIGJyYW5jaDogWyBtYXN0ZXIsIHJlZnMvdGFncywgcmVsZWFzZSBdCiMgICAgICAgZmFpbHVyZTogdHJ1ZQoKIyBwdWJsaXNoOgojICAgYmludHJheToKIyAgICAgdXNlcm5hbWU6ICQkQklOVFJBWV9VU0VSTkFNRQojICAgICBhcGlfa2V5OiAkJEJJTlRSQVlfQVBJX0tFWQojICAgICBhcnRpZmFjdHM6CiMgICAgICAgLSBmaWxlOiBiaW4vdmljXyREUk9ORV9CVUlMRF9OVU1CRVIudGFyLmd6CiMgICAgICAgICBvd25lcjogdm13YXJlCiMgICAgICAgICB0eXBlOiBleGVjdXRhYmxlCiMgICAgICAgICByZXBvc2l0b3J5OiB2aWMtcmVwbwojICAgICAgICAgcGFja2FnZTogYnVpbGQKIyAgICAgICAgIHZlcnNpb246ICREUk9ORV9CVUlMRF9OVU1CRVIKIyAgICAgICAgIHRhcmdldDogdmljXyREUk9ORV9CVUlMRF9OVU1CRVIudGFyLmd6CiMgICAgICAgICBwdWJsaXNoOiB0cnVlCiMgICAgIHdoZW46CiMgICAgICAgcmVwbzogdm13YXJlL3ZpYwojICAgICAgIGJyYW5jaDogWyBtYXN0ZXIsIHJlZnMvdGFncywgcmVsZWFzZSBdCiMgICAgICAgc3VjY2VzczogdHJ1ZQojICAgY292ZXJhZ2U6CiMgICAgIHNlcnZlcjogaHR0cHM6Ly9jb3ZlcmFnZS52bXdhcmUucnVuCiMgICAgIHRva2VuOiAkJEdJVEhVQl9BVVRPTUFUSU9OX0FQSV9LRVkKIyAgICAgaW5jbHVkZTogL2Ryb25lL3NyYy9naXRodWIuY29tL3Ztd2FyZS92aWMvLmNvdmVyL2NvdmVyLm91dAojICAgICB3aGVuOgojICAgICAgIHJlcG86IHZtd2FyZS92aWMKIyAgICAgICBicmFuY2g6IFsgbWFzdGVyLCByZWZzL3RhZ3MsIHJlbGVhc2UgXQojICAgICAgIHN1Y2Nlc3M6IHRydWUK.41f1nEZwYWMfriiu3BC53su2wDREN7kogaH8Fzh23SI