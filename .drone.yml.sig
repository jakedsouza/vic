eyJhbGciOiJIUzI1NiJ9.IyBBZnRlciBhbnkgY2hhbmdlIHRvIHRoaXMgZmlsZSB5b3UgTVVTVCByZWdlbmVyYXRlIGFuZCBjaGVja2luCiMgYSAuZHJvbmUuc2VjIGV2ZW4gaWYgbm8gc2VjcmV0cyB3ZXJlIGNoYW5nZWQuIFRoZSBzZWNyZXRzIGZpbGUgaXMgdGllZAojIHRvIGEgc3BlY2lmaWMgLmRyb25lLnltbCBzbyBhcnRpZmFjdHMgd2lsbCBub3QgYmUgdXBsb2FkZWQgdG8gKE9SIERPV05MT0FERUQKIyBGUk9NKSBCaW50cmF5IGluIGZvbGxvd2luZyBidWlsZHMgd2l0aG91dCBhbiB1cGRhdGVkIC5kcm9uZS5zZWMKIwojIFdoZW4geW91IGFyZSByZWFkeSB0byBzdWJtaXQgYSBwdWxsIHJlcXVlc3QsIHlvdSBtdXN0IHJlZ2VuZXJhdGUgLmRyb25lLnNlYyBmb3IgdGhlIHZtd2FyZS92aWMgcmVwbzoKIwojICQgZHJvbmUgLXMgaHR0cHM6Ly9jaS52bXdhcmUucnVuIC10ICR7RFJPTkVfVE9LRU59IHNlY3VyZSAtLWluICJzZWNyZXRzLnltbCIgLS1vdXQgIi5kcm9uZS5zZWMiIC0tcmVwbyB2bXdhcmUvdmljIC0teWFtbCAiLmRyb25lLnltbCIKIwojIFRoZSBzZWNyZXRzIGZpbGUgaXMgaW4gb3VyIGxvY2FsIGdpdCByZXBvLiAgQXNrIG1oYWdlbiBmb3IgYWNjZXNzLgotLS0Kd29ya3NwYWNlOgogIGJhc2U6IC9nbwogIHBhdGg6IHNyYy9naXRodWIuY29tL3Ztd2FyZS92aWMKCnBpcGVsaW5lOgogIGNsb25lOgogICAgaW1hZ2U6IHBsdWdpbnMvZ2l0CiAgICB0YWdzOiB0cnVlCiAgICAjIGRvbnQgY2xvbmUgc3VibW9kdWxlcwogICAgcmVjdXJzaXZlOiBmYWxzZQoKICB3YWl0LWZvci1idWlsZDoKICAgIGltYWdlOiBnY3IuaW8vZW1pbmVudC1uYXRpb24tODczMTcvdmljLWludGVncmF0aW9uLXRlc3Q6MS4yMgogICAgcHVsbDogdHJ1ZQogICAgZW52aXJvbm1lbnQ6CiAgICAgIEJJTjogYmluCiAgICAgIEdPUEFUSDogL2dvCiAgICAgIFNIRUxMOiAvYmluL2Jhc2gKICAgICAgVEVTVF9VUkxfQVJSQVk6ICAke1RFU1RfVVJMX0FSUkFZfQogICAgICBEUk9ORV9TRVJWRVI6ICAke0RST05FX1NFUlZFUn0KICAgICAgRFJPTkVfVE9LRU46ICAke0RST05FX1RPS0VOfQogICAgY29tbWFuZHM6CiAgICAgIC0gZWNobyAke1RFU1RfVVJMX0FSUkFZfQogICAgICAtIHRlc3RzL3dhaXRfdW50aWxfcHJldmlvdXNfYnVpbGRzX2NvbXBsZXRlLnNoCgogIHZpYy1lbmdpbmU6CiAgICBpbWFnZTogZ2NyLmlvL2VtaW5lbnQtbmF0aW9uLTg3MzE3L3ZpYy1pbnRlZ3JhdGlvbi10ZXN0OjEuMjIKICAgIHB1bGw6IHRydWUKICAgIGVudmlyb25tZW50OgogICAgICBCSU46IGJpbgogICAgICBHT1BBVEg6IC9nbwogICAgICBTSEVMTDogL2Jpbi9iYXNoCiAgICAgIFRFU1RfVVJMX0FSUkFZOiAgJHtURVNUX1VSTF9BUlJBWX0KICAgICAgVEVTVF9VU0VSTkFNRTogICR7VEVTVF9VU0VSTkFNRX0KICAgICAgVEVTVF9QQVNTV09SRDogICR7VEVTVF9QQVNTV09SRH0KICAgICAgQlVJTERfTlVNQkVSOiAke0RST05FX0JVSUxEX05VTUJFUn0KICAgICAgQ09NTUlUOiAke0RST05FX0NPTU1JVF9TSEF9CiAgICBjb21tYW5kczoKICAgICAgLSBtYWtlIG1hcmsKICAgICAgLSBtYWtlIC1qMyBhbGwKICAgICAgLSBtYWtlIHNpbmNlbWFyawogICAgICAtIG1ha2UgbWFyawogICAgICAtIGVjaG8gYGxzIHZlbmRvci9naXRodWIuY29tL3Ztd2FyZS9nb3Ztb21pL3ZpbTI1L21ldGhvZHNgCiAgICAgIC0gZWNobyBgbHMgdmVuZG9yL2dpdGh1Yi5jb20vdm13YXJlL2dvdm1vbWkvdmltMjUvdHlwZXNgCiAgICAgIC0gZWNobyBgbHMgdmVuZG9yL2dpdGh1Yi5jb20vZG9ja2VyL2RvY2tlci92ZW5kb3IvZ2l0aHViLmNvbS9vcGVuY29udGFpbmVycy9ydW5jL2xpYmNvbnRhaW5lci9zeXN0ZW1gCiAgICAgIC0gZXhwb3J0IFZJQ19FU1hfVVJMX0FSUkFZPSJgdGVzdHMvZ2V0X3Rlc3RfdXJsLnNoYCIKICAgICAgLSBtYWtlIC1qMyB0ZXN0CiAgICAgIC0gbWFrZSBzaW5jZW1hcmsKCiAgaW50ZWdyYXRpb24tdGVzdC1vbi1wcjoKICAgIGltYWdlOiBnY3IuaW8vZW1pbmVudC1uYXRpb24tODczMTcvdmljLWludGVncmF0aW9uLXRlc3Q6MS4yMgogICAgcHVsbDogdHJ1ZQogICAgcHJpdmlsZWdlZDogdHJ1ZQogICAgZW52aXJvbm1lbnQ6CiAgICAgIEJJTjogYmluCiAgICAgIEdPUEFUSDogL2Ryb25lCiAgICAgIFNIRUxMOiAvYmluL2Jhc2gKICAgICAgTE9HX1RFTVBfRElSOiBpbnN0YWxsLWxvZ3MKICAgICAgR0lUSFVCX0FVVE9NQVRJT05fQVBJX0tFWTogJHtHSVRIVUJfQVVUT01BVElPTl9BUElfS0VZfQogICAgICBEUk9ORV9TRVJWRVI6ICR7RFJPTkVfU0VSVkVSfQogICAgICBEUk9ORV9UT0tFTjogJHtEUk9ORV9UT0tFTn0KICAgICAgVEVTVF9VUkxfQVJSQVk6ICR7VEVTVF9VUkxfQVJSQVl9CiAgICAgIFRFU1RfVVNFUk5BTUU6ICR7VEVTVF9VU0VSTkFNRX0KICAgICAgVEVTVF9QQVNTV09SRDogJHtURVNUX1BBU1NXT1JEfQogICAgICBURVNUX0RBVEFTVE9SRTogJHtURVNUX0RBVEFTVE9SRX0KICAgICAgVEVTVF9USU1FT1VUOiAke1RFU1RfVElNRU9VVH0KICAgICAgUkVQT1JUSU5HX1NFUlZFUl9VUkw6ICR7UkVQT1JUSU5HX1NFUlZFUl9VUkx9CiAgICAgIFdJTkRPV1NfVVJMOiAke1dJTkRPV1NfVVJMfQogICAgICBXSU5ET1dTX1VTRVJOQU1FOiAke1dJTkRPV1NfVVNFUk5BTUV9CiAgICAgIFdJTkRPV1NfUEFTU1dPUkQ6ICR7V0lORE9XU19QQVNTV09SRH0KICAgICAgR09WQ19JTlNFQ1VSRTogdHJ1ZQogICAgICBHT1ZDX1VTRVJOQU1FOiAke1RFU1RfVVNFUk5BTUV9CiAgICAgIEdPVkNfUEFTU1dPUkQ6ICR7VEVTVF9QQVNTV09SRH0KICAgICAgR09WQ19SRVNPVVJDRV9QT09MOiAke1RFU1RfUkVTT1VSQ0V9CiAgICAgIEdPVkNfREFUQVNUT1JFOiAke1RFU1RfREFUQVNUT1JFfQogICAgICBHU19QUk9KRUNUX0lEOiAke0dTX1BST0pFQ1RfSUR9CiAgICAgIEdTX0NMSUVOVF9FTUFJTDogJHtHU19DTElFTlRfRU1BSUx9CiAgICAgIEdTX1BSSVZBVEVfS0VZOiAke0dTX1BSSVZBVEVfS0VZfQogICAgICBET01BSU46ICR7Q0lfRE9NQUlOfQogICAgY29tbWFuZHM6CiAgICAgIC0gbWFrZSBtYXJrCiAgICAgIC0gdGVzdHMvaW50ZWdyYXRpb24tdGVzdC5zaAogICAgICAtIG1ha2Ugc2luY2VtYXJrCiAgICB3aGVuOgogICAgICBzdWNjZXNzOiB0cnVlCgogIHZpY3VpOgogICAgaW1hZ2U6IGdjci5pby9lbWluZW50LW5hdGlvbi04NzMxNy92aWMtaW50ZWdyYXRpb24tdGVzdDoxLjIyCiAgICBwdWxsOiB0cnVlCiAgICBlbnZpcm9ubWVudDoKICAgICAgQklOOiBiaW4KICAgIGNvbW1hbmRzOgogICAgICAtIG1ha2UgbWFyawogICAgICAtIG1ha2UgdmljLXVpLXBsdWdpbnMKICAgICAgLSBtYWtlIHNpbmNlbWFyawogICAgd2hlbjoKICAgICAgc3VjY2VzczogdHJ1ZQoKICBidW5kbGU6CiAgICBpbWFnZTogZ29sYW5nOjEuOAogICAgcHVsbDogdHJ1ZQogICAgZW52aXJvbm1lbnQ6CiAgICAgIEJJTjogYmluCiAgICAgIEJJTl9URU1QX0RJUjogYmluL3ZpYwogICAgICBHT1BBVEg6IC9nbwogICAgICBTSEVMTDogL2Jpbi9iYXNoCiAgICBjb21tYW5kczoKICAgICAgLSBtYWtlIG1hcmsKICAgICAgLSBybSAtcmYgJEJJTl9URU1QX0RJUgogICAgICAtIG1rZGlyIC1wICRCSU5fVEVNUF9ESVIvdWkKICAgICAgLSBjcCAtcmYgdWkvaW5zdGFsbGVyLyogJEJJTl9URU1QX0RJUi91aQogICAgICAtIGNwIExJQ0VOU0UgJEJJTl9URU1QX0RJUgogICAgICAtIGNwIGRvYy9idW5kbGUvUkVBRE1FICRCSU5fVEVNUF9ESVIKICAgICAgLSBjcCAkQklOL3ZpYy1tYWNoaW5lKiAkQklOX1RFTVBfRElSCiAgICAgIC0gY3AgJEJJTi92aWMtdWkqICRCSU5fVEVNUF9ESVIKICAgICAgLSBjcCAkQklOL2FwcGxpYW5jZS5pc28gJEJJTl9URU1QX0RJUgogICAgICAtIGNwICRCSU4vYm9vdHN0cmFwLmlzbyAkQklOX1RFTVBfRElSCiAgICAgIC0gdGFyIGN6dmYgJEJJTi92aWNfJHtEUk9ORV9CVUlMRF9OVU1CRVJ9LnRhci5neiAtQyAkQklOIHZpYwogICAgICAtIHNoYXN1bSAtYSAyNTYgJEJJTi92aWNfJHtEUk9ORV9CVUlMRF9OVU1CRVJ9LnRhci5negogICAgICAtIHNoYXN1bSAtYSAxICRCSU4vdmljXyR7RFJPTkVfQlVJTERfTlVNQkVSfS50YXIuZ3oKICAgICAgLSBtZDVzdW0gJEJJTi92aWNfJHtEUk9ORV9CVUlMRF9OVU1CRVJ9LnRhci5negogICAgICAtIGR1IC1rcyAkQklOL3ZpY18ke0RST05FX0JVSUxEX05VTUJFUn0udGFyLmd6IHwgYXdrICd7cHJpbnQgJDEgLyAxMDI0fScgfCB7IHJlYWQgeDsgZWNobyAkeCBNQjsgfQogICAgICAtIG1ha2Ugc2luY2VtYXJrCiAgICB3aGVuOgogICAgICByZXBvOiBqYWtlZHNvdXphL3ZpYwogICAgICAjIGJyYW5jaDogWyBtYXN0ZXIsIHJlZnMvdGFncywgcmVsZWFzZSBdCiAgICAgIHN1Y2Nlc3M6IHRydWUKCiMgbm90aWZ5OgojICAgc2xhY2s6CiMgICAgIHdlYmhvb2tfdXJsOiAkJFNMQUNLX1VSTAojICAgICBjaGFubmVsOiBtd2lsbGlhbXNvbi1zdGFmZgojICAgICB1c2VybmFtZTogZHJvbmUKIyAgICAgdGVtcGxhdGU6ID4KIyAgICAgICBidWlsZCBodHRwczovL2NpLnZtd2FyZS5ydW4vdm13YXJlL3ZpYy97eyBidWlsZC5udW1iZXIgfX0gZmluaXNoZWQgd2l0aCBhIHt7IGJ1aWxkLnN0YXR1cyB9fSBzdGF0dXMsIGZpbmQgdGhlIGxvZ3MgaGVyZTogaHR0cHM6Ly9jb25zb2xlLmNsb3VkLmdvb2dsZS5jb20vbS9jbG91ZHN0b3JhZ2UvYi92aWMtY2ktbG9ncy9vL2ludGVncmF0aW9uX2xvZ3Nfe3sgYnVpbGQubnVtYmVyIH19X3t7IGJ1aWxkLmNvbW1pdCB9fS56aXA_YXV0aHVzZXI9MQojICAgICB3aGVuOgojICAgICAgIHJlcG86IHZtd2FyZS92aWMKIyAgICAgICBicmFuY2g6IFsgbWFzdGVyLCByZWZzL3RhZ3MsIHJlbGVhc2UgXQojICAgICAgIGZhaWx1cmU6IHRydWUKCiMgcHVibGlzaDoKIyAgIGJpbnRyYXk6CiMgICAgIHVzZXJuYW1lOiAkJEJJTlRSQVlfVVNFUk5BTUUKIyAgICAgYXBpX2tleTogJCRCSU5UUkFZX0FQSV9LRVkKIyAgICAgYXJ0aWZhY3RzOgojICAgICAgIC0gZmlsZTogYmluL3ZpY18kRFJPTkVfQlVJTERfTlVNQkVSLnRhci5negojICAgICAgICAgb3duZXI6IHZtd2FyZQojICAgICAgICAgdHlwZTogZXhlY3V0YWJsZQojICAgICAgICAgcmVwb3NpdG9yeTogdmljLXJlcG8KIyAgICAgICAgIHBhY2thZ2U6IGJ1aWxkCiMgICAgICAgICB2ZXJzaW9uOiAkRFJPTkVfQlVJTERfTlVNQkVSCiMgICAgICAgICB0YXJnZXQ6IHZpY18kRFJPTkVfQlVJTERfTlVNQkVSLnRhci5negojICAgICAgICAgcHVibGlzaDogdHJ1ZQojICAgICB3aGVuOgojICAgICAgIHJlcG86IHZtd2FyZS92aWMKIyAgICAgICBicmFuY2g6IFsgbWFzdGVyLCByZWZzL3RhZ3MsIHJlbGVhc2UgXQojICAgICAgIHN1Y2Nlc3M6IHRydWUKIyAgIGNvdmVyYWdlOgojICAgICBzZXJ2ZXI6IGh0dHBzOi8vY292ZXJhZ2Uudm13YXJlLnJ1bgojICAgICB0b2tlbjogJCRHSVRIVUJfQVVUT01BVElPTl9BUElfS0VZCiMgICAgIGluY2x1ZGU6IC9kcm9uZS9zcmMvZ2l0aHViLmNvbS92bXdhcmUvdmljLy5jb3Zlci9jb3Zlci5vdXQKIyAgICAgd2hlbjoKIyAgICAgICByZXBvOiB2bXdhcmUvdmljCiMgICAgICAgYnJhbmNoOiBbIG1hc3RlciwgcmVmcy90YWdzLCByZWxlYXNlIF0KIyAgICAgICBzdWNjZXNzOiB0cnVlCg.NOKshwwrfqPeaJ1jsezAe3mEGzqHlm4uPCblep1E3cI