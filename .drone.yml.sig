eyJhbGciOiJIUzI1NiJ9.IyBBZnRlciBhbnkgY2hhbmdlIHRvIHRoaXMgZmlsZSB5b3UgTVVTVCByZWdlbmVyYXRlIGFuZCBjaGVja2luCiMgYSAuZHJvbmUuc2VjIGV2ZW4gaWYgbm8gc2VjcmV0cyB3ZXJlIGNoYW5nZWQuIFRoZSBzZWNyZXRzIGZpbGUgaXMgdGllZAojIHRvIGEgc3BlY2lmaWMgLmRyb25lLnltbCBzbyBhcnRpZmFjdHMgd2lsbCBub3QgYmUgdXBsb2FkZWQgdG8gKE9SIERPV05MT0FERUQKIyBGUk9NKSBCaW50cmF5IGluIGZvbGxvd2luZyBidWlsZHMgd2l0aG91dCBhbiB1cGRhdGVkIC5kcm9uZS5zZWMKIwojIFdoZW4geW91IGFyZSByZWFkeSB0byBzdWJtaXQgYSBwdWxsIHJlcXVlc3QsIHlvdSBtdXN0IHJlZ2VuZXJhdGUgLmRyb25lLnNlYyBmb3IgdGhlIHZtd2FyZS92aWMgcmVwbzoKIwojICQgZHJvbmUgLXMgaHR0cHM6Ly9jaS52bXdhcmUucnVuIC10ICR7RFJPTkVfVE9LRU59IHNlY3VyZSAtLWluICJzZWNyZXRzLnltbCIgLS1vdXQgIi5kcm9uZS5zZWMiIC0tcmVwbyB2bXdhcmUvdmljIC0teWFtbCAiLmRyb25lLnltbCIKIwojIFRoZSBzZWNyZXRzIGZpbGUgaXMgaW4gb3VyIGxvY2FsIGdpdCByZXBvLiAgQXNrIG1oYWdlbiBmb3IgYWNjZXNzLgotLS0Kd29ya3NwYWNlOgogIGJhc2U6IC9nbwogIHBhdGg6IHNyYy9naXRodWIuY29tL3Ztd2FyZS92aWMKCnBpcGVsaW5lOgogIGNsb25lOgogICAgaW1hZ2U6IHBsdWdpbnMvZ2l0CiAgICB0YWdzOiB0cnVlCiAgICAjIGRvbnQgY2xvbmUgc3VibW9kdWxlcwogICAgcmVjdXJzaXZlOiBmYWxzZQoKICB3YWl0LWZvci1idWlsZDoKICAgIHByZXZlbnQtY29uY3VycmVudC1idWlsZHM6CiAgICAgIGltYWdlOiAke1RFU1RfQlVJTERfSU1BR0U9Z2NyLmlvL2VtaW5lbnQtbmF0aW9uLTg3MzE3L3ZpYy1pbnRlZ3JhdGlvbi10ZXN0OjEuMjJ9CiAgICAgIHB1bGw6IHRydWUKICAgICAgZW52aXJvbm1lbnQ6CiAgICAgICAgQklOOiBiaW4KICAgICAgICBHT1BBVEg6IC9nbwogICAgICAgIFNIRUxMOiAvYmluL2Jhc2gKICAgICAgICBURVNUX1VSTF9BUlJBWTogICRURVNUX1VSTF9BUlJBWQogICAgICAgIERST05FX1NFUlZFUjogICREUk9ORV9TRVJWRVIKICAgICAgICBEUk9ORV9UT0tFTjogICREUk9ORV9UT0tFTgogICAgICBjb21tYW5kczoKICAgICAgICAtIHRlc3RzL3dhaXRfdW50aWxfcHJldmlvdXNfYnVpbGRzX2NvbXBsZXRlLnNoCgogIHZpYy1lbmdpbmU6CiAgICBpbWFnZTogJHtURVNUX0JVSUxEX0lNQUdFPWdjci5pby9lbWluZW50LW5hdGlvbi04NzMxNy92aWMtaW50ZWdyYXRpb24tdGVzdDoxLjIyfQogICAgcHVsbDogdHJ1ZQogICAgZW52aXJvbm1lbnQ6CiAgICAgIEJJTjogYmluCiAgICAgIEdPUEFUSDogL2dvCiAgICAgIFNIRUxMOiAvYmluL2Jhc2gKICAgICAgVEVTVF9VUkxfQVJSQVk6ICAkVEVTVF9VUkxfQVJSQVkKICAgICAgVEVTVF9VU0VSTkFNRTogICRURVNUX1VTRVJOQU1FCiAgICAgIFRFU1RfUEFTU1dPUkQ6ICAkVEVTVF9QQVNTV09SRAogICAgICBCVUlMRF9OVU1CRVI6ICREUk9ORV9CVUlMRF9OVU1CRVIKICAgICAgQ09NTUlUOiAkRFJPTkVfQ09NTUlUX1NIQQogICAgY29tbWFuZHM6CiAgICAgIC0gbWFrZSBtYXJrCiAgICAgIC0gbWFrZSAtajMgYWxsCiAgICAgIC0gbWFrZSBzaW5jZW1hcmsKICAgICAgLSBtYWtlIG1hcmsKICAgICAgLSBlY2hvIGBscyB2ZW5kb3IvZ2l0aHViLmNvbS92bXdhcmUvZ292bW9taS92aW0yNS9tZXRob2RzYAogICAgICAtIGVjaG8gYGxzIHZlbmRvci9naXRodWIuY29tL3Ztd2FyZS9nb3Ztb21pL3ZpbTI1L3R5cGVzYAogICAgICAtIGVjaG8gYGxzIHZlbmRvci9naXRodWIuY29tL2RvY2tlci9kb2NrZXIvdmVuZG9yL2dpdGh1Yi5jb20vb3BlbmNvbnRhaW5lcnMvcnVuYy9saWJjb250YWluZXIvc3lzdGVtYAogICAgICAtIGV4cG9ydCBWSUNfRVNYX1VSTF9BUlJBWT0iYHRlc3RzL2dldF90ZXN0X3VybC5zaGAiCiAgICAgIC0gbWFrZSAtajMgdGVzdAogICAgICAtIG1ha2Ugc2luY2VtYXJrCgogIGludGVncmF0aW9uLXRlc3Qtb24tcHI6CiAgICBpbWFnZTogJHtURVNUX0JVSUxEX0lNQUdFPWdjci5pby9lbWluZW50LW5hdGlvbi04NzMxNy92aWMtaW50ZWdyYXRpb24tdGVzdDoxLjIyfQogICAgcHVsbDogdHJ1ZQogICAgcHJpdmlsZWdlZDogdHJ1ZQogICAgZW52aXJvbm1lbnQ6CiAgICAgIEJJTjogYmluCiAgICAgIEdPUEFUSDogL2Ryb25lCiAgICAgIFNIRUxMOiAvYmluL2Jhc2gKICAgICAgTE9HX1RFTVBfRElSOiBpbnN0YWxsLWxvZ3MKICAgICAgR0lUSFVCX0FVVE9NQVRJT05fQVBJX0tFWTogICQkR0lUSFVCX0FVVE9NQVRJT05fQVBJX0tFWQogICAgICBEUk9ORV9TRVJWRVI6ICAkRFJPTkVfU0VSVkVSCiAgICAgIERST05FX1RPS0VOOiAgJERST05FX1RPS0VOCiAgICAgIFRFU1RfVVJMX0FSUkFZOiAgJFRFU1RfVVJMX0FSUkFZCiAgICAgIFRFU1RfVVNFUk5BTUU6ICAkVEVTVF9VU0VSTkFNRQogICAgICBURVNUX1BBU1NXT1JEOiAgJFRFU1RfUEFTU1dPUkQKICAgICAgVEVTVF9EQVRBU1RPUkU6ICRURVNUX0RBVEFTVE9SRQogICAgICBURVNUX1RJTUVPVVQ6ICRURVNUX1RJTUVPVVQKICAgICAgUkVQT1JUSU5HX1NFUlZFUl9VUkw6ICRSRVBPUlRJTkdfU0VSVkVSX1VSTAogICAgICBXSU5ET1dTX1VSTDogICRXSU5ET1dTX1VSTAogICAgICBXSU5ET1dTX1VTRVJOQU1FOiAgJFdJTkRPV1NfVVNFUk5BTUUKICAgICAgV0lORE9XU19QQVNTV09SRDogICRXSU5ET1dTX1BBU1NXT1JECiAgICAgIEdPVkNfSU5TRUNVUkU6IHRydWUKICAgICAgR09WQ19VU0VSTkFNRTogICRURVNUX1VTRVJOQU1FCiAgICAgIEdPVkNfUEFTU1dPUkQ6ICAkVEVTVF9QQVNTV09SRAogICAgICBHT1ZDX1JFU09VUkNFX1BPT0w6ICAkVEVTVF9SRVNPVVJDRQogICAgICBHT1ZDX0RBVEFTVE9SRTogJFRFU1RfREFUQVNUT1JFCiAgICAgIEdTX1BST0pFQ1RfSUQ6ICRHU19QUk9KRUNUX0lECiAgICAgIEdTX0NMSUVOVF9FTUFJTDogJEdTX0NMSUVOVF9FTUFJTAogICAgICBHU19QUklWQVRFX0tFWTogJEdTX1BSSVZBVEVfS0VZCiAgICAgIERPTUFJTjogJENJX0RPTUFJTgogICAgY29tbWFuZHM6CiAgICAgIC0gbWFrZSBtYXJrCiAgICAgIC0gdGVzdHMvaW50ZWdyYXRpb24tdGVzdC5zaAogICAgICAtIG1ha2Ugc2luY2VtYXJrCiAgICB3aGVuOgogICAgICBzdWNjZXNzOiB0cnVlCgogIHZpY3VpOgogICAgaW1hZ2U6ICR7VEVTVF9CVUlMRF9JTUFHRT1nY3IuaW8vZW1pbmVudC1uYXRpb24tODczMTcvdmljLWludGVncmF0aW9uLXRlc3Q6MS4yMn0KICAgIHB1bGw6IHRydWUKICAgIGVudmlyb25tZW50OgogICAgICBCSU46IGJpbgogICAgY29tbWFuZHM6CiAgICAgIC0gbWFrZSBtYXJrCiAgICAgIC0gbWFrZSB2aWMtdWktcGx1Z2lucwogICAgICAtIG1ha2Ugc2luY2VtYXJrCiAgICB3aGVuOgogICAgICBzdWNjZXNzOiB0cnVlCgogIGJ1bmRsZToKICAgIGltYWdlOiBnb2xhbmc6MS44CiAgICBwdWxsOiB0cnVlCiAgICBlbnZpcm9ubWVudDoKICAgICAgQklOOiBiaW4KICAgICAgQklOX1RFTVBfRElSOiBiaW4vdmljCiAgICAgIEdPUEFUSDogL2dvCiAgICAgIFNIRUxMOiAvYmluL2Jhc2gKICAgIGNvbW1hbmRzOgogICAgICAtIG1ha2UgbWFyawogICAgICAtIHJtIC1yZiAkQklOX1RFTVBfRElSCiAgICAgIC0gbWtkaXIgLXAgJEJJTl9URU1QX0RJUi91aQogICAgICAtIGNwIC1yZiB1aS9pbnN0YWxsZXIvKiAkQklOX1RFTVBfRElSL3VpCiAgICAgIC0gY3AgTElDRU5TRSAkQklOX1RFTVBfRElSCiAgICAgIC0gY3AgZG9jL2J1bmRsZS9SRUFETUUgJEJJTl9URU1QX0RJUgogICAgICAtIGNwICRCSU4vdmljLW1hY2hpbmUqICRCSU5fVEVNUF9ESVIKICAgICAgLSBjcCAkQklOL3ZpYy11aSogJEJJTl9URU1QX0RJUgogICAgICAtIGNwICRCSU4vYXBwbGlhbmNlLmlzbyAkQklOX1RFTVBfRElSCiAgICAgIC0gY3AgJEJJTi9ib290c3RyYXAuaXNvICRCSU5fVEVNUF9ESVIKICAgICAgLSB0YXIgY3p2ZiAkQklOL3ZpY18kRFJPTkVfQlVJTERfTlVNQkVSLnRhci5neiAtQyAkQklOIHZpYwogICAgICAtIHNoYXN1bSAtYSAyNTYgJEJJTi92aWNfJERST05FX0JVSUxEX05VTUJFUi50YXIuZ3oKICAgICAgLSBzaGFzdW0gLWEgMSAkQklOL3ZpY18kRFJPTkVfQlVJTERfTlVNQkVSLnRhci5negogICAgICAtIG1kNXN1bSAkQklOL3ZpY18kRFJPTkVfQlVJTERfTlVNQkVSLnRhci5negogICAgICAtIGR1IC1rcyAkQklOL3ZpY18kRFJPTkVfQlVJTERfTlVNQkVSLnRhci5neiB8IGF3ayAne3ByaW50ICQxIC8gMTAyNH0nIHwgeyByZWFkIHg7IGVjaG8gJHggTUI7IH0KICAgICAgLSBtYWtlIHNpbmNlbWFyawogICAgd2hlbjoKICAgICAgcmVwbzogamFrZWRzb3V6YS92aWMKICAgICAgIyBicmFuY2g6IFsgbWFzdGVyLCByZWZzL3RhZ3MsIHJlbGVhc2UgXQogICAgICBzdWNjZXNzOiB0cnVlCgojIG5vdGlmeToKIyAgIHNsYWNrOgojICAgICB3ZWJob29rX3VybDogJCRTTEFDS19VUkwKIyAgICAgY2hhbm5lbDogbXdpbGxpYW1zb24tc3RhZmYKIyAgICAgdXNlcm5hbWU6IGRyb25lCiMgICAgIHRlbXBsYXRlOiA-CiMgICAgICAgYnVpbGQgaHR0cHM6Ly9jaS52bXdhcmUucnVuL3Ztd2FyZS92aWMve3sgYnVpbGQubnVtYmVyIH19IGZpbmlzaGVkIHdpdGggYSB7eyBidWlsZC5zdGF0dXMgfX0gc3RhdHVzLCBmaW5kIHRoZSBsb2dzIGhlcmU6IGh0dHBzOi8vY29uc29sZS5jbG91ZC5nb29nbGUuY29tL20vY2xvdWRzdG9yYWdlL2IvdmljLWNpLWxvZ3Mvby9pbnRlZ3JhdGlvbl9sb2dzX3t7IGJ1aWxkLm51bWJlciB9fV97eyBidWlsZC5jb21taXQgfX0uemlwP2F1dGh1c2VyPTEKIyAgICAgd2hlbjoKIyAgICAgICByZXBvOiB2bXdhcmUvdmljCiMgICAgICAgYnJhbmNoOiBbIG1hc3RlciwgcmVmcy90YWdzLCByZWxlYXNlIF0KIyAgICAgICBmYWlsdXJlOiB0cnVlCgojIHB1Ymxpc2g6CiMgICBiaW50cmF5OgojICAgICB1c2VybmFtZTogJCRCSU5UUkFZX1VTRVJOQU1FCiMgICAgIGFwaV9rZXk6ICQkQklOVFJBWV9BUElfS0VZCiMgICAgIGFydGlmYWN0czoKIyAgICAgICAtIGZpbGU6IGJpbi92aWNfJERST05FX0JVSUxEX05VTUJFUi50YXIuZ3oKIyAgICAgICAgIG93bmVyOiB2bXdhcmUKIyAgICAgICAgIHR5cGU6IGV4ZWN1dGFibGUKIyAgICAgICAgIHJlcG9zaXRvcnk6IHZpYy1yZXBvCiMgICAgICAgICBwYWNrYWdlOiBidWlsZAojICAgICAgICAgdmVyc2lvbjogJERST05FX0JVSUxEX05VTUJFUgojICAgICAgICAgdGFyZ2V0OiB2aWNfJERST05FX0JVSUxEX05VTUJFUi50YXIuZ3oKIyAgICAgICAgIHB1Ymxpc2g6IHRydWUKIyAgICAgd2hlbjoKIyAgICAgICByZXBvOiB2bXdhcmUvdmljCiMgICAgICAgYnJhbmNoOiBbIG1hc3RlciwgcmVmcy90YWdzLCByZWxlYXNlIF0KIyAgICAgICBzdWNjZXNzOiB0cnVlCiMgICBjb3ZlcmFnZToKIyAgICAgc2VydmVyOiBodHRwczovL2NvdmVyYWdlLnZtd2FyZS5ydW4KIyAgICAgdG9rZW46ICQkR0lUSFVCX0FVVE9NQVRJT05fQVBJX0tFWQojICAgICBpbmNsdWRlOiAvZHJvbmUvc3JjL2dpdGh1Yi5jb20vdm13YXJlL3ZpYy8uY292ZXIvY292ZXIub3V0CiMgICAgIHdoZW46CiMgICAgICAgcmVwbzogdm13YXJlL3ZpYwojICAgICAgIGJyYW5jaDogWyBtYXN0ZXIsIHJlZnMvdGFncywgcmVsZWFzZSBdCiMgICAgICAgc3VjY2VzczogdHJ1ZQo.qExCjhEg7HtsTt22FC-eQBukOc3cnVUPrfubEIyq0K0